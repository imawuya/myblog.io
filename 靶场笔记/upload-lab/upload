# pass01（前端js代码校验）
## 禁用js
上传wehsell，发现禁止php类型的文件上传，只能上传jpg、png、gif类型的文件

![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811041643591-1954946273.png)

<br>
查看网页源代码，发现文件类型和弹框是由前端JS代码校验的<br>
这关有有三种方法可以绕过：

- 禁用js
- 修改前端代码
- 上传合法后缀文件，改文件后缀

![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811041847775-320070864.png)

## 禁用js
这个比较简单，只需要勾选 禁用js即可
![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811045846806-269189273.png)

<br>
上传成功

![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811045937999-1943033142.png)

## 修改前端代码
删除 checkFile() 即可上传文件
>checkfile通常指的是在前端（即浏览器端）对文件进行验证和检查的过程。它可以用于确保用户上传的文件符合特定的要求或限制。
![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811050108505-1309908576.png)

## burp抓包修改文件后缀
将上传的文件后缀修改为合法格式，如 .png ，使用burp进行抓包，将文件后缀修改回原本的后缀即可上传成功
![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811051352687-1527257093.png)

# pass-02
查看源代码，发现本关是后端过滤MIME，有两种方法可以绕过：

- 改Content-Type
- 上传合法后缀文件，改文件后缀
>MIME是一种用于标识互联网上不同类型文件的标准，它能正确地解析和处理文件，并确保文件在传输过程中能够被正确地识别和处理。

![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811051637244-308838138.png)

## 改Content-Type

![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811052409663-1913638589.png)

## 上传合法后缀文件，改文件后缀
![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811052549699-738150617.png)

# pass-03
查看源代码，发现禁止上传'.asp','.aspx','.php','.jsp'的文件，应该是后端文件后缀黑名单过滤
![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811052907306-386112891.png)

<br>
可以使用 .php3、.php5、.phtml、.htaccess等后缀绕过上传

# pass-04
查看源代码，发现新增了许多后缀名，但是缺少了 .htaccess
![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811053431646-2134566236.png)

<br>新建一个htaccess文件，再将webshell后缀修改为.jpg
在文件内写入以下代码：
```
<FilesMatch "one.jpg">

SetHandler application/x-httpd-php

<FilesMatch >
```
这段代码的意思是：当请求的文件名为"one.jpg"时，将使用"application/x-httpd-php"处理程序来处理该文件。换句话说，当用户访问名为"one.jpg"的文件时，服务器将把它当作PHP脚本来执行，而不是简单地将其作为静态图片文件返回给用户。

<br>
先上传htaccess文件，再上传jpg文件即可

# pass-05
这一关对文件后缀名的过滤比较全，但是没有循环过滤，可以通过. .进行绕过上传
![img](https://img2023.cnblogs.com/blog/2719656/202308/2719656-20230811060101463-1970984104.png)

<br>
将文件名后缀改为.php. .这里的验证过程首先是过滤了文件末尾的点，将后缀名改为小写，去除后缀名中的::$DATA，最后再首尾去空。由于这里只过滤了一次，所以将.php. .被过滤成.php.还是可以绕过这里的黑名单验证，最后上传成功
